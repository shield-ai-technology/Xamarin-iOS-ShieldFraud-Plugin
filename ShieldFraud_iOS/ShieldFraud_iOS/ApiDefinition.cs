using System;

using ObjCRuntime;
using Foundation;
using UIKit;

namespace ShieldFraud
{

    [BaseType(typeof(NSObject))]
    public enum Environment : int
    {
        Prod = 0,
        Dev = 1,
        Stag = 2
    }

    [BaseType(typeof(NSObject))]
    public enum LogLevel : int
    {
        Debug = 3,
        Info = 2,
        None = 1
    }

    //@interface BlockedDialog : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC11ShieldFraud13BlockedDialog")]
    [DisableDefaultCtor]
    interface BlockedDialog
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull title;
        [Export("title")]
        string Title { get; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull body;
        [Export("body")]
        string Body { get; }

        // -(instancetype _Nonnull)initWithTitle:(NSString * _Nonnull)title body:(NSString * _Nonnull)body __attribute__((objc_designated_initializer));
        [Export("initWithTitle:body:")]
        [DesignatedInitializer]
        IntPtr Constructor(string title, string body);
    }

    // @interface Configuration : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC11ShieldFraud13Configuration")]
    [DisableDefaultCtor]
    interface Configuration
    {
        // @property (nonatomic) enum Environment environment;
        [Export("environment")]
        Environment Environment { get; set; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull siteId;
        [Export("siteId")]
        string SiteId { get; }

        // @property (nonatomic) enum LogLevel logLevel;
        [Export("logLevel")]
        LogLevel LogLevel { get; set; }

        // @property (nonatomic, strong) id<DeviceShieldCallback> _Nullable deviceShieldCallback;
        [NullAllowed, Export("deviceShieldCallback", ArgumentSemantic.Strong)]
        ShieldFraud.DeviceShieldCallback DeviceShieldCallback { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable partnerId;
        [NullAllowed, Export("partnerId")]
        string PartnerId { get; set; }

        // @property (copy, nonatomic) NSString * _Nullable debugKey;
        [NullAllowed, Export("debugKey")]
        string DebugKey { get; set; }

        // @property (readonly, copy, nonatomic) NSString * _Nonnull secretKey;
        [Export("secretKey")]
        string SecretKey { get; }

        // @property (nonatomic, strong) BlockedDialog * _Nullable defaultBlockedDialog;
        [NullAllowed, Export("defaultBlockedDialog", ArgumentSemantic.Strong)]
        BlockedDialog DefaultBlockedDialog { get; set; }

        // -(instancetype _Nonnull)initWithSiteId:(NSString * _Nonnull)siteId secretKey:(NSString * _Nonnull)secretKey __attribute__((objc_designated_initializer));
        [Export("initWithSiteId:secretKey:")]
        [DesignatedInitializer]
        IntPtr Constructor(string siteId, string secretKey);
    }

    // @protocol DeviceResultStateDelegate
    [Protocol(Name = "_TtP11ShieldFraud25DeviceResultStateDelegate_"), Model(AutoGeneratedName = true)]
    interface DeviceResultStateDelegate
    {
        // @required -(void)isReady;
        [Abstract]
        [Export("isReady")]
        void IsReady();
    }

    // @protocol DeviceShieldCallback
    /*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/
    //[Protocol(Name = "_TtP11ShieldFraud20DeviceShieldCallback_")]
    [BaseType(typeof(NSObject))]
    [Model]
    interface DeviceShieldCallback
    {
        // @required -(void)didSuccessWithResult:(NSDictionary<NSString *,id> * _Nonnull)result;
        [Abstract]
        [Export("didSuccessWithResult:")]
        void DidSuccessWithResult(NSDictionary<NSString, NSObject> result);

        // @required -(void)didErrorWithError:(NSError * _Nonnull)error;
        [Abstract]
        [Export("didErrorWithError:")]
        void DidErrorWithError(NSError error);
    }

    // @interface Shield : NSObject
    [BaseType(typeof(NSObject), Name = "_TtC11ShieldFraud6Shield")]
    [DisableDefaultCtor]
    interface Shield
    {
        // @property (readonly, copy, nonatomic) NSString * _Nonnull sessionId;
        [Export("sessionId")]
        string SessionId { get; }

        // +(void)setUpWith:(Configuration * _Nonnull)configuration;
        [Static]
        [Export("setUpWith:")]
        void SetUpWith(Configuration configuration);

        // +(Shield * _Nonnull)shared __attribute__((warn_unused_result("")));
        [Static]
        [Export("shared")]
        //[Verify(MethodToProperty)]
        Shield Shared { get; }

        // -(void)sendAttributesWithScreenName:(NSString * _Nonnull)screenName data:(NSDictionary<NSString *,NSString *> * _Nonnull)data;
        [Export("sendAttributesWithScreenName:data:")]
        void SendAttributesWithScreenName(string screenName, NSDictionary<NSString, NSString> data);

        // -(void)sendAttributesWithScreenName:(NSString * _Nonnull)screenName data:(NSDictionary<NSString *,NSString *> * _Nonnull)data :(void (^ _Nonnull)(BOOL, NSError * _Nullable))handler;
        [Export("sendAttributesWithScreenName:data::")]
        void SendAttributesWithScreenName(string screenName, NSDictionary<NSString, NSString> data, Action<bool, NSError> handler);

        // -(NSDictionary<NSString *,id> * _Nullable)getLatestDeviceResult __attribute__((warn_unused_result("")));
        //[Static]
        [NullAllowed, Export("getLatestDeviceResult")]
        NSDictionary<NSString, NSObject> LatestDeviceResult { get; }

        // -(NSError * _Nullable)getErrorResponse __attribute__((warn_unused_result("")));
        //[Static]
        [NullAllowed, Export("getErrorResponse")]
        NSError ErrorResponse { get; }

        // -(void)setDeviceResultStateListener:(void (^ _Nullable)(void))isReady;
        [Export("setDeviceResultStateListener:")]
        void SetDeviceResultStateListener([NullAllowed] Action isReady);

        // -(void)sendDeviceSignatureWithScreenName:(NSString * _Nonnull)screenName;
        [Export("sendDeviceSignatureWithScreenName:")]
        void SendDeviceSignatureWithScreenName(string screenName);

        // -(void)sendDeviceSignatureWithScreenName:(NSString * _Nonnull)screenName completionHandler:(void (^ _Nonnull)(void))completionHandler;
        [Export("sendDeviceSignatureWithScreenName:completionHandler:")]
        void SendDeviceSignatureWithScreenName(string screenName, Action completionHandler);
    }

}